#include "ros/ros.h"
#include "std_msgs/Int8.h"
#include "std_msgs/Int32.h"
#include "std_msgs/String.h"
#include "std_msgs/MultiArrayLayout.h"
#include "std_msgs/MultiArrayDimension.h"
#include "std_msgs/Int8MultiArray.h"
#include "tkrb2018/PlanQueue.h"
#include <stdio.h>
#include <string>
#include <iostream>
using namespace std;

int fieldMap[9][10] = {};//マッピング情報。各格子点の状態を要素とする配列。周囲１マス分を余分に確保して0で埋めている。
#define MAPW 9
#define MAPH 10
#define UNIT_SCALE 300//mm。１マスのおおきさ

#define PI 3.1416

/*------------------モータの情報--------------*/
#define STEP 1.8
#define WHEEL_DIAMETER 150//mm-?
#define MM_PER_PULSE (WHEEL_DIAMETER * PI / 360)*STEP//mm
#define DEFAULT_MOTOR_POW 60//max 100

/*-------------------機体の情報-----------------*/
int selfPosition[2] = {4,9};//初期位置。下図のS
//機体の向いている方向。時計回り。
#define FORWARD 0
#define RIGHT 1
#define BACKWARD 2
#define LEFT 3
int headingDirection = FORWARD;//最初は前方を向いている。

enum stateParam {STOP = -1,IDLE = 0, WORKING = 1};
stateParam state = IDLE;//マシンのタスク受付状態
/*----------------------------------------------*/


struct leftRightStr{//足回り駆動用で使う左右の変数
  int l;
  int r;
};
struct leftRightStr targetPulse = {0,0};//目標パルス
struct leftRightStr motorPulseOutput = {0,0};//サブスクライブする変数
struct leftRightStr motorInput = {0,0};//パブリッシュする変数
std_msgs::Int8 motor_input_l,motor_input_r;


/*-------------------マップ情報-----------------*/
#define OBSTICLE -1
//ボールのある位置は、おいてあるボールの数で表記する。
//例）[3][4]にボールが２個->fieldMap[3][4] = 2;
/*---------------------------------------------*/


std_msgs::Int8 snapshotReq;//Publishする変数。
ros::Publisher webcamRequestPub;//ImageProcessing.pyに画像処理を依頼する。
ros::Publisher motorRInput,motorLInput;
ros::Subscriber webcamOutputSub;//ImageProcessing.pyから返る値を扱う。
ros::Subscriber testSub;//テスト用。
ros::Subscriber pulseLSub,pulseRSub;//足回りのパルス読み取り

ros::ServiceClient planQueueClient;
tkrb2018::PlanQueue planQueueSrv;


void initializeMap();//マップ関連情報の初期化。
void showMap();//マップ表示。デバッグ用
void snapshotCallback(const std_msgs::Int8MultiArray::ConstPtr& camResult);//CallBack
void testCallback(const std_msgs::String::ConstPtr& val);

/*--------------マップ上の情報更新---------------*/
void moveMachineOnMap(char mv);//下記の関数を用いてマシンを移動する。
void rotateMachine(int d);//回転
void forbackMachine(int d);//前進後退
/*---------------------------------------------*/


/*-----------------------コールバック関数------------*/
void takeSnapShot();
void pulseRCallback(const std_msgs::Int32::ConstPtr& pR);
void pulseLCallback(const std_msgs::Int32::ConstPtr& pL);
/*--------------------------------------------------*/


/*---------------走行系の関数-------------------*/
int cvtDegreesToPulse(double degs);//角度パラメータを入力パルスに変換
int cvtUnitToPulse(double units);//すすめるマスを入力パルスに変換
bool checkMoveProgress(char t);//taskの動作が完了したかどうか、パルスを見て判断
void setTargetPulse(char t, int par);//目標パルスを算出
bool checkTargetPulse(int val, int target, int ex = 0, bool cw = true);//目標パルスに入力パルスが近づいたら（ex(extention)=判定範囲）
void taskFlowHandler();//taskキューのメイン処理
/*---------------------------------------------*/



int main(int argc, char **argv)
{
  ros::init(argc, argv, "main");
  ros::NodeHandle n;
  snapshotReq.data = 1;//initVar
  initializeMap();
  showMap();
  webcamRequestPub = n.advertise<std_msgs::Int8>("snapshot_req", 1000);
  webcamOutputSub = n.subscribe("webcam_out", 1000, snapshotCallback);
  testSub = n.subscribe("test",1000,testCallback);
  pulseLSub = n.subscribe("pulse_l",1000,pulseLCallback);
  pulseRSub = n.subscribe("pulse_r",1000,pulseRCallback);
  motorLInput = n.advertise<std_msgs::Int8>("motor_l_input", 1000);
  motorRInput = n.advertise<std_msgs::Int8>("motor_r_input", 1000);

  planQueueClient = n.serviceClient<tkrb2018::PlanQueue>("plan_queue");
  

  ros::Rate loop_rate(10);

  while (ros::ok())
  {
    taskFlowHandler();
    ros::spinOnce();
    loop_rate.sleep();
  }


  return 0;
}

void pulseLCallback(const std_msgs::Int32::ConstPtr& pL) {
  motorPulseOutput.l = pL->data;
}
void pulseRCallback(const std_msgs::Int32::ConstPtr& pR) {
  motorPulseOutput.r = pR->data;
}

void initializeMap(){
  //フィールド中央のカゴを障害物とする。
  fieldMap[4][5] = OBSTICLE;//OBSTICLE = -1 マップ上は"X"
  //既知領域のボール位置
  fieldMap[4][7] = 1;
  fieldMap[5][6] = 1;
  fieldMap[6][8] = 1;
  fieldMap[2][5] = 1;
  fieldMap[2][7] = 2;
  /*- - - - - - - - -
    - 0 0 0 0 0 0 0 -
    - 0 0 0 0 0 0 0 -
    - 0 0 0 0 0 0 0 -
    - 0 0 0 0 0 0 0 -
    - 0 1 0 x 0 0 0 -
    - 0 0 0 0 1 0 0 -
    - 0 2 0 1 0 0 0 -
    - 0 0 0 0 0 1 0 -
    - - - - S - - - -
   */
}

void showMap(){
  ostringstream oss;
  string buf;
  string dir;
  for(int j=0;j<MAPH;j++){
    for(int i=0;i<MAPW;i++){
      int token = fieldMap[i][j];

      if(i == selfPosition[0] && j == selfPosition[1])oss << 'M';//マシンの自己位置'M'
      else if(token == -1)oss << 'x';//障害物'x'
      else if(token == 0)oss << '.';//その他の領域
      else oss << fieldMap[i][j];//ボールの位置
    }
    ROS_INFO((oss.str()).c_str());
    oss.str("");
    oss.clear(stringstream::goodbit);// ストリームの状態をクリアする。
  }
  ROS_INFO("\t\t selfPos(%d,%d)",selfPosition[0],selfPosition[1]);
  if(headingDirection == FORWARD)dir = "forward";
  else if(headingDirection == RIGHT)dir = "right";
  else if(headingDirection == LEFT)dir = "left";
  else if(headingDirection == BACKWARD)dir = "back";
  ROS_INFO("\t\t heading(%s)",dir.c_str());
  ROS_INFO("");
}

void moveMachineOnMap(char mv){
  if (mv == 'F')forbackMachine(FORWARD);
  else if(mv == 'B')forbackMachine(BACKWARD);
}

void snapshotCallback(const std_msgs::Int8MultiArray::ConstPtr& camResult){
  //ImageProcessingからのデータ処理 camResult.data = {正面か側面か、○マス先、何が}
  int cameraHeading = camResult->data[0];//正面か側面か
  int distanceByUnits = camResult->data[1];//何マス先か
  int thing = camResult->data[2];//何が(-1(OBSTICLE),1(BALL),2(BALLS),3,...)
  
}

void rotateMachine(int d){// d=RIGHT or LEFT 左旋回、右旋回を反映
  if(d == RIGHT){
    headingDirection++;
    if(headingDirection == 4)headingDirection = 0;
  }else if(d == LEFT){
    headingDirection--;
    if(headingDirection == -1)headingDirection = 3;
  }
}

void forbackMachine(int d){// d=FORWARD or BACKWARD 前進、後退を反映
  if(d == FORWARD){
    switch(headingDirection){
    case FORWARD:
      selfPosition[1]--;
      //ROS_INFO("I moved");
      break;
    case RIGHT:
      selfPosition[0]++;
      break;
    case BACKWARD:
      selfPosition[1]++;
      break;
    case LEFT:
      selfPosition[0]--;
      break;
    }
  }else if(d == BACKWARD){
    switch(headingDirection){
    case FORWARD:
      selfPosition[1]++;
      break;
    case RIGHT:
      selfPosition[0]--;
      break;
    case BACKWARD:
      selfPosition[1]--;
      break;
    case LEFT:
      selfPosition[0]++;
      break;
    }
  }
}

void takeSnapShot(){
  webcamRequestPub.publish(snapshotReq);
}


void testCallback(const std_msgs::String::ConstPtr& val){
  if(val->data == "f" || val->data == "F"){
    moveMachineOnMap('F');
  }else if(val->data == "b" || val->data == "B"){
    moveMachineOnMap('B');
  }else if(val->data == "r" || val->data == "R"){
    rotateMachine(RIGHT);
  }else if(val->data == "l" || val->data == "L"){
    rotateMachine(LEFT);
  }
  showMap();
}


int cvtUnitToPulse(double units){
  double additionalPulse = units * UNIT_SCALE / MM_PER_PULSE;
  ROS_INFO("additionalPulse %f",additionalPulse);
  return additionalPulse;
}

int cvtDegreesToPulse(double degs){
  return 0;//取り急ぎ
}

void setMotorSpeed(int l,int r){
  motorInput.l = l;
  motorInput.r = r;
}

void publishMotorInput(){
  motor_input_l.data = motorInput.l;
  motor_input_r.data = motorInput.r;
  motorLInput.publish(motor_input_l);
  motorRInput.publish(motor_input_r);
}

void setTargetPulse(char t, int par){
  switch(t){
  case 'f':
    //前進操作
    targetPulse = {motorPulseOutput.l + cvtUnitToPulse(par),
		   motorPulseOutput.r + cvtUnitToPulse(par)};
    setMotorSpeed(DEFAULT_MOTOR_POW,DEFAULT_MOTOR_POW);
    ROS_INFO("setTargetPulseTo %d",targetPulse.l);
    break;
  case 'b':
    //後退操作
    targetPulse = {motorPulseOutput.l - cvtUnitToPulse(par),
		   motorPulseOutput.r - cvtUnitToPulse(par)};
    setMotorSpeed(-DEFAULT_MOTOR_POW,-DEFAULT_MOTOR_POW);
    break;
  case 'r':
    //右旋回
    targetPulse = {motorPulseOutput.l + cvtDegreesToPulse(par),
		   motorPulseOutput.r - cvtDegreesToPulse(par)};
    setMotorSpeed(DEFAULT_MOTOR_POW,-DEFAULT_MOTOR_POW);
      break;
  case 'l':
    //左旋回
    targetPulse = {motorPulseOutput.l - cvtDegreesToPulse(par),
		   motorPulseOutput.r + cvtDegreesToPulse(par)};
    setMotorSpeed(-DEFAULT_MOTOR_POW,DEFAULT_MOTOR_POW);
    break;
  default:
    return;
  }
  state = WORKING;
}

bool checkTargetPulse(int val, int target, int ex, bool cw){
  if(cw == true){
    if(val > target-ex)return 1;
    else return 0;
  }else if(cw == false){
    if(val < target+ex)return 1;
    else return 0;
  }else ROS_INFO("FALSE INPUT");
}
     

bool checkMoveProgress(char t){
  switch(t){
  case 'f':
    //前進操作
    if(checkTargetPulse(motorPulseOutput.l,targetPulse.l,40,true) &&
       checkTargetPulse(motorPulseOutput.l,targetPulse.l,40,true))
      return 1;
    break;
  case 'b':
    //後退操作
    if(checkTargetPulse(motorPulseOutput.l,targetPulse.l,40,false) &&
       checkTargetPulse(motorPulseOutput.l,targetPulse.l,40,false))
      return 1;
    break;
  case 'r':
    //右旋回
    
    break;
  case 'l':
    //左旋回
    
    break;
  default:
    break;
  }

  return 0;
}
  
void taskFlowHandler(){
  static char task = 'x';
  static string task_buf = "x";
  static double param = 0.0;


  
  if(state == STOP)return;
  else if(state == IDLE){
    //srv,msgを使ってpyノードからtaskとparam格納する
    planQueueSrv.request.request = "Next";//次のタスクを取得
    if (planQueueClient.call(planQueueSrv)){
      task_buf = planQueueSrv.response.task;
      param = planQueueSrv.response.param;
      task = task_buf[0];
    }
    else{
      ROS_ERROR("Failed to call service");
    }
    
    setTargetPulse(task,param);
    ROS_INFO("accepted task");
    ROS_INFO("%c,%f",task,param);
  }else if(state == WORKING){
    if(checkMoveProgress(task) == true){//目標パルスに届いたら
      setMotorSpeed(0,0);//マシンを止める。
      state = IDLE;//次の動作を受け付ける。
      ROS_INFO("requesting next task");
    }
  }
  publishMotorInput();
}
