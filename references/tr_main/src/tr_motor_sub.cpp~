#include "ros/ros.h"
#include "std_msgs/String.h"
#include "sensor_msgs/Joy.h"
#include "std_msgs/Int32.h"
#include "std_msgs/Int8.h"
//#include "tr_controller/motor.h"
#include <sstream>

#define THRESHOLD 0.7
#define DEFAULTPW 50
#define WHEEL_DIAMETER 87.5 * 2   //mm
#define INNER_WHEEL_DISTANCE 585  //mm
#define PI 3.14 //pi
#define PULSE_PER_STEP 1.8 //degree
#define ONE_PULSE_DISTANCE WHEEL_DIAMETER * PI * PULSE_PER_STEP / 360 //mm
#define ONE_GRID_DISTANCE 300 //mm
#define LINE_TRACE_GAIN 10 //xxx

std_msgs::Int8 servo_motor_l, servo_motor_r;
int pulse_motor_r, pulse_motor_l;
int line_sensor_value[4] = {};

void lineSensor0Callback(const std_msgs::Int8::ConstPtr& msg) {
  line_sensor_value[0] = msg->data;
}
void lineSensor1Callback(const std_msgs::Int8::ConstPtr& msg) {
  line_sensor_value[1] = msg->data;
}
void lineSensor2Callback(const std_msgs::Int8::ConstPtr& msg) {
  line_sensor_value[2] = msg->data;
}
void lineSensor3Callback(const std_msgs::Int8::ConstPtr& msg) {
  line_sensor_value[3] = msg->data;
}
void pulseMotorRCallback(const std_msgs::Int32::ConstPtr& msg) {
  pulse_motor_r = msg->data;
}
void pulseMotorLCallback(const std_msgs::Int32::ConstPtr& msg) {
  pulse_motor_l = msg->data;
}
  
double turnPulse(double degree) {
  // add the result to one param and sub the result to another param
  double distance = (PI * INNER_WHEEL_DISTANCE * degree/360);
  double opdis = ONE_PULSE_DISTANCE;  
  double result = distance / opdis;
  //  ROS_INFO("distance: %f", distance);
  //  ROS_INFO("op_distance: %f", opdis);  
  //  ROS_INFO("result: %f", result);
  return result;
}

double fowardPulse(double grid_sum) {
  double tmp = (ONE_GRID_DISTANCE * grid_sum);
  double tmp2 = ONE_PULSE_DISTANCE;
  double tmp3 = tmp/tmp2;
  //  ROS_INFO("grid_sum: %f", grid_sum);
  //  ROS_INFO("foward_pulse: %f", tmp);
  //  ROS_INFO("foward_pulse2: %f", tmp2);
  //  ROS_INFO("foward_pulse3: %f", tmp3);
  //return (double)((ONE_GRID_DISTANCE * grid_sum) / ONE_PULSE_DISTANCE);
  return (double)tmp3;
}

void line_trace(int default_pw) {
  if (line_sensor_value[0] > line_gray[0] && line_sensor_value[3] > line_gray[3]){ // cross a line
    // pass
  } else if (line_sensor_value[0] > line_gray[0]){  // turn left.
    power_motor_l.data = default_pw - default_pw / LINE_TRACE_GAIN;
  } else if (line_sensor_value[3] > line_gray[3]){  // turn right
    power_motor_r.data = default_pw - default_pw / LINE_TRACE_GAIN;    
  }
}

/*
int state = 0; //0 is to set, 1 is working.
int number = 0;
char task = 'x';
double param = 0.0;
int target_r = 0;
int target_l = 0;  
*/
void move_handler() {
  
  static int state = 0; //0 is to set, 1 is working.
  static int number = 0;
  static char task = 'x';
  static double param = 0.0;
  static int target_r = 0;
  static int target_l = 0;
  static int count = 0; // time count
      
  if (state == 0) {
    task = plan[number];
    param = (double)plan[number+1];
    ROS_INFO("move: %c", task);
    switch(task) {
      //********** set target **********//
    case 'f':
      target_r = pulse_motor_r + fowardPulse(param);
      target_l = pulse_motor_l + fowardPulse(param);
      //      ROS_INFO("param:%f", param);
      //      ROS_INFO("fwp:%f", fowardPulse(param));
      //      ROS_INFO("pmr:%d", pulse_motor_r);
      //      ROS_INFO("tr:%d", target_r);      
      power_motor_r.data = DEFAULTPW;
      power_motor_l.data = DEFAULTPW;
      break;
    case 'b':
      target_r = pulse_motor_r - fowardPulse(param);
      target_l = pulse_motor_l - fowardPulse(param);
      power_motor_r.data = -DEFAULTPW;
      power_motor_l.data = -DEFAULTPW;
      break;
    case 'r':
      target_r = pulse_motor_r - turnPulse(param);
      target_l = pulse_motor_l + turnPulse(param);
      power_motor_r.data = -DEFAULTPW;
      power_motor_l.data = DEFAULTPW;
      break;
    case 'l':
      target_r = pulse_motor_r + turnPulse(param);
      target_l = pulse_motor_l - turnPulse(param);
      power_motor_r.data = DEFAULTPW;
      power_motor_l.data = -DEFAULTPW;      
      break;      
    case 's'://stop
      power_motor_r.data = 0;
      power_motor_l.data = 0;
      count = param;
      break;
    default:
      break;
    }    
    state = 1;
    number += 2;
  } else {
    //********** finish check **********//
    //    ROS_INFO("tr:%d, pr:%d, tl:%d, pl:%d", target_r, pulse_motor_r, target_l, pulse_motor_l);
    switch(task) {      
    case 'f':
      if (target_r < pulse_motor_r && target_l < pulse_motor_l) {
	state = 0;
      } else {
	line_trace(DEFAULTPW);
      }
      break;
    case 'b':
      if (target_r > pulse_motor_r && target_l > pulse_motor_l) {
	state = 0;
      }
      break;
    case 'r':
      if (target_r > pulse_motor_r && target_l < pulse_motor_l) {
	state = 0;
      }
      break;
    case 'l':
      if (target_r < pulse_motor_r && target_l > pulse_motor_l) {
	state = 0;
      }
      break;
    case 's':
      count --;
      if (count < 0) {
	state = 0;
      }
      break;      
    }    
    
  }
}
  

//std_msgs::Int8 mv; // 0静止　1前進　2後退　3左旋回　4右旋回

int main(int argc, char **argv)
{
  ros::init(argc, argv, "tr_main");
  ros::NodeHandle n;
  //ros::Subscriber joy = n.subscribe("joy",1000,joyCallback);
  //ros::Publisher motorR_pub = n.advertise<std_msgs::Int8>("motorR", 1000);
  //ros::Publisher motorL_pub = n.advertise<std_msgs::Int8>("motorL",1000);
  //ros::Publisher motor_pub = n.advertise<std_msgs::Int8MultiArray>("motor", 1000);
  //ros::Publisher motor_pub = n.advertise<tr_controller::motor>("motor",1000);
  //ros::Publisher move_pub = n.advertise<std_msgs::Int8>("move",1000);
  ros::Publisher motorL_pub = n.advertise<std_msgs::Int8>("power_motor_l",1000);
  ros::Publisher motorR_pub = n.advertise<std_msgs::Int8>("power_motor_r",1000);
  ros::Subscriber pulse_motor_r_sub = n.subscribe("pulse_motor_r",1000, pulseMotorRCallback);
  ros::Subscriber pulse_motor_l_sub = n.subscribe("pulse_motor_l",1000, pulseMotorLCallback);
  ros::Subscriber line_sensor_0_sub = n.subscribe("chatter0",1000, lineSensor0Callback);
  ros::Subscriber line_sensor_1_sub = n.subscribe("chatter1",1000, lineSensor1Callback);
  ros::Subscriber line_sensor_2_sub = n.subscribe("chatter2",1000, lineSensor2Callback);
  ros::Subscriber line_sensor_3_sub = n.subscribe("chatter3",1000, lineSensor3Callback);  
  
  ros::Rate loop_rate(10);

  int count = 0;
  while (ros::ok())
  {
    move_handler();
    motorL_pub.publish(power_motor_l);
    motorR_pub.publish(power_motor_r);
    ros::spinOnce();
    loop_rate.sleep();
    ++count;
  }


  return 0;
}
